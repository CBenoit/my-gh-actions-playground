# Configuration file for git-cliff

[changelog]

# changelog header
header = """
# Changelog

All notable changes to this project will be documented in this file.

The format is based on [Keep a Changelog](https://keepachangelog.com/en/1.0.0/).

Also, this project adheres to [Semantic Versioning](https://semver.org/spec/v2.0.0.html)
and [Conventional Commits specification](https://www.conventionalcommits.org/en/v1.0.0/).

Minimal rustc version bumps happen only with minor number bumps in this project.

"""

# template for the changelog body
# https://tera.netlify.app/docs/#introduction
body = """
{% if version -%}
  ## [{{ version | trim_start_matches(pat="v") }}] - {{ timestamp | date(format="%Y-%m-%d") }} ({{ commit_id }})
{%- else -%}
  ## [Unreleased]
{%- endif %}

{% for group, commits in commits | group_by(attribute="group") -%}

### {{ group | upper_first }}

{%- for commit in commits %}

- {% if commit.scope %}_{{ commit.scope }}_: {% endif %}{% if commit.breaking %}[**breaking**] {% endif %}{{ commit.message | upper_first }} ({{ commit.id }}) \
  {% if commit.body %}\n\n  {{ commit.body | replace(from="\n", to="\n  ") }}{% endif %}
{%- endfor %}

{% endfor -%}
"""

# remove the leading and trailing whitespace from the template
trim = false
# changelog footer
footer = ""

[git]

# parse the commits based on https://www.conventionalcommits.org
conventional_commits = true
# filter out the commits that are not conventional
filter_unconventional = true
# regex for preprocessing the commit messages
commit_preprocessors = [
  # Replace issue number with the link
  { pattern = '\((\w+\s)?#([0-9]+)\)', replace = "([#${2}](https://github.com/Devolutions/picky/issues/${2}))"},
]
# regex for parsing and grouping commits
commit_parsers = [
    { message = "^build", skip = true },
    { message = "^chore", skip = true },
    { message = "^ci", skip = true },
    { message = "^style", skip = true },
    { message = "^refactor", skip = true },

    { message = "(?i)security", group = "Security" },
    { body = "(?i)security", group = "Security" },

    { message = "^feat", group = "Features" },
    { message = "^fix", group = "Bug Fixes" },
    { message = "^doc", group = "Documentation" },
    { message = "^perf", group = "Performance" },
    { message = "^test", group = "Testing" },
]
# filter out the commits that are not matched by commit parsers
filter_commits = false
# sort the tags chronologically
date_order = false
# sort the commits inside sections by oldest/newest order
sort_commits = "oldest"
